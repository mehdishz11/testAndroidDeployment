name: Generated APK AAB (Upload - Create Artifact To Github Action)

env:
  # The name of the main module repository
  main_project_module: app

  # The name of the Play Store
  playstore_name: testing_store

on:

  push:
    branches:
      - 'master/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4


      - name: Set current date as env variable
        run: echo "date_today=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      # Set Repository Name As Env Variable
      - name: Set repository name as env variable
        run: echo "repository_name=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')" >> $GITHUB_ENV

      - name: Set Up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu' # See 'Supported distributions' for available options
          java-version: '17'
          cache: 'gradle'

      - name: Change wrapper permissions
        run: chmod +x ./gradlew

        # sing the application
      - name: Decode Signing Keystored
        run: |
          echo "${{ secrets.SIGNING_KEY_BASE64 }}" > keystore_base64.txt
          base64 -d keystore_base64.txt > app/Test.jks
          rm keystore_base64.txt

      # Run Build Project
      - name: Build gradle project
        run: ./gradlew build

      # For APK Release
      - name: Build signed APK release
        run: |
          # Clean previous builds
          ./gradlew clean
          
          # Build with debug output
          ./gradlew ${{ env.main_project_module }}:assembleRelease \
            --stacktrace --info \
            -Pandroid.injected.signing.store.file=${{ github.workspace }}/app/Test.jks \
            -Pandroid.injected.signing.store.password='${{ secrets.SIGNING_STORE_PASSWORD }}' \
            -Pandroid.injected.signing.key.alias='${{ secrets.SIGNING_KEY_ALIAS }}' \
            -Pandroid.injected.signing.key.password='${{ secrets.SIGNING_KEY_PASSWORD }}'
          
          # Verify APK exists
          echo "Generated APKs:"
          find ${{ github.workspace }} -name "*.apk" -exec ls -lh {} \;
          
          # Copy to predictable location
          mkdir -p apk_artifacts
          cp ${{ github.workspace }}/app/build/outputs/apk/**/release/*.apk apk_artifacts/

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: apk_artifacts/*.apk
          retention-days: 7
